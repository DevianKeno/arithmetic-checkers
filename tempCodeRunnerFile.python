def build_suffixes_array(pattern):
    pattern_length = len(pattern)
    suffixes_array = [-1] * pattern_length
    i = pattern_length - 1
    j = pattern_length - 2

    while i > 0:
        if pattern[i] == pattern[j]:
            suffixes_array[j] = i
            i -= 1
            j -= 1
        elif j < pattern_length - 2:
            j = pattern_length - 2
        else:
            i -= 1

    return suffixes_array


def build_good_suffix_table(pattern):
    pattern_length = len(pattern)
    suffixes_array = build_suffixes_array(pattern)
    good_suffix_table = [pattern_length] * pattern_length

    for i in range(pattern_length - 2, -1, -1):
        if suffixes_array[i] == i + 1:
            break
        good_suffix_table[pattern_length - 1 - suffixes_array[i]] = pattern_length - 1 - i

    for i in range(pattern_length - 1):
        j = pattern_length - 1 - suffixes_array[i]
        if good_suffix_table[i] == pattern_length:
            good_suffix_table[i] = j

    if suffixes_array[0] == 0:
        for i in range(pattern_length):
            if good_suffix_table[i] == pattern_length:
                good_suffix_table[i] = pattern_length - 1

    return good_suffix_table


def boyer_moore_search(text, pattern):
    pattern_length = len(pattern)
    text_length = len(text)
    good_suffix_table = build_good_suffix_table(pattern)
    i = pattern_length - 1
    j = pattern_length - 1

    while i < text_length:
        if text[i] == pattern[j]:
            if j == 0:
                return i
            i -= 1
            j -= 1
        else:
            shift = good_suffix_table[j]
            i += shift
            j = pattern_length - 1

    return -1


# Example usage:
text = "ABABDABACDABABCABAB"
pattern = "ABABCABAB"
result = boyer_moore_search(text, pattern)

if result != -1:
    print("Pattern found at index", result)
else:
    print("Pattern not found in the text.")